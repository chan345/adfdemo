{
	"name": "transacation_dataflow",
	"properties": {
		"folder": {
			"name": "demo"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "input_transaction",
						"type": "DatasetReference"
					},
					"name": "Transacation"
				},
				{
					"dataset": {
						"referenceName": "AzureSynapseAnalyticsTable1",
						"type": "DatasetReference"
					},
					"name": "lkpcustomer"
				},
				{
					"dataset": {
						"referenceName": "AzureSynapseAnalyticsTable1",
						"type": "DatasetReference"
					},
					"name": "incremental"
				},
				{
					"dataset": {
						"referenceName": "AzureSynapseAnalyticsTable1",
						"type": "DatasetReference"
					},
					"name": "maxsurgatekey"
				},
				{
					"dataset": {
						"referenceName": "transactions",
						"type": "DatasetReference"
					},
					"name": "lkptransaction"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "transactions",
						"type": "DatasetReference"
					},
					"name": "transactionUPDATEflow"
				},
				{
					"dataset": {
						"referenceName": "transactions",
						"type": "DatasetReference"
					},
					"name": "transactionInsertFlow"
				}
			],
			"transformations": [
				{
					"name": "datatypechange"
				},
				{
					"name": "Lookupcustomer"
				},
				{
					"name": "incrementaljoin"
				},
				{
					"name": "Filterdata"
				},
				{
					"name": "updateflow"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "insertflow"
				},
				{
					"name": "Lookup1"
				},
				{
					"name": "SurrogateKey1"
				},
				{
					"name": "DerivedColumn1"
				}
			],
			"script": "source(output(\n\t\ttransaction_id as string,\n\t\tcust_id as integer,\n\t\ttran_date as string,\n\t\tprod_subcat_code as short,\n\t\tprod_cat_code as short,\n\t\tQty as short,\n\t\tRate as short,\n\t\tTax as double,\n\t\ttotal_amt as double,\n\t\tStore_type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tlimit: 0) ~> Transacation\nsource(output(\n\t\tD_KEY as integer,\n\t\tcustomer_Id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select D_KEY,customer_Id from D_customer',\n\tformat: 'query',\n\tstaged: false) ~> lkpcustomer\nsource(output(\n\t\tSrc_Tab as string,\n\t\tWatermark_Value as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select [Src_Tab],[Watermark_Value] from config',\n\tformat: 'query',\n\tstaged: false) ~> incremental\nsource(output(\n\t\tmax_Transaction_key as integer,\n\t\tout_key as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: '\\nselect max(Transaction_key) as max_Transaction_key,\\'1\\' as out_key from Transactions\\n',\n\tformat: 'query',\n\tstaged: false) ~> maxsurgatekey\nsource(output(\n\t\tTransaction_key as integer,\n\t\tcustomer_Key as integer,\n\t\tcustomer_id as integer,\n\t\ttransaction_id as string,\n\t\ttran_date as date,\n\t\tprod_subcat_code as integer,\n\t\tprod_cat_code as integer,\n\t\tQty as integer,\n\t\tRate as integer,\n\t\tTax as integer,\n\t\ttotal_amt as integer,\n\t\tStore_type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> lkptransaction\nTransacation derive(tran_date = toTimestamp(tran_date,'dd-MM-yyyy'),\n\t\tsource_tablename = 'Transactions',\n\t\tinput_key = '1') ~> datatypechange\nincrementaljoin, lkpcustomer lookup(cust_id == customer_Id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookupcustomer\ndatatypechange, incremental join(source_tablename == Src_Tab,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> incrementaljoin\nLookupcustomer filter(tran_date > Watermark_Value) ~> Filterdata\nFilterdata, lkptransaction exists(Transacation@transaction_id == lkptransaction@transaction_id,\n\tnegate:false,\n\tbroadcast: 'auto')~> updateflow\nupdateflow alterRow(updateIf(true())) ~> AlterRow1\nFilterdata, lkptransaction exists(Transacation@transaction_id == lkptransaction@transaction_id,\n\tnegate:true,\n\tbroadcast: 'auto')~> insertflow\ninsertflow, maxsurgatekey lookup(input_key == out_key,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 keyGenerate(output(surgate_key as long),\n\tstartAt: 1L) ~> SurrogateKey1\nSurrogateKey1 derive(out_surgatekey = max_Transaction_key + surgate_key) ~> DerivedColumn1\nAlterRow1 sink(input(\n\t\tTransaction_key as integer,\n\t\tcustomer_Key as integer,\n\t\tcustomer_id as integer,\n\t\ttransaction_id as string,\n\t\ttran_date as date,\n\t\tprod_subcat_code as integer,\n\t\tprod_cat_code as integer,\n\t\tQty as integer,\n\t\tRate as integer,\n\t\tTax as integer,\n\t\ttotal_amt as integer,\n\t\tStore_type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['transaction_id'],\n\tformat: 'table',\n\tstaged: true,\n\tpostSQLs:['update config set [Watermark_Value]= (select max(tran_date) from Transactions)'],\n\tmapColumn(\n\t\ttransaction_id,\n\t\ttran_date,\n\t\tprod_subcat_code,\n\t\tprod_cat_code,\n\t\tQty,\n\t\tRate,\n\t\tTax,\n\t\ttotal_amt,\n\t\tStore_type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2) ~> transactionUPDATEflow\nDerivedColumn1 sink(input(\n\t\tTransaction_key as integer,\n\t\tcustomer_Key as integer,\n\t\tcustomer_id as integer,\n\t\ttransaction_id as string,\n\t\ttran_date as date,\n\t\tprod_subcat_code as integer,\n\t\tprod_cat_code as integer,\n\t\tQty as integer,\n\t\tRate as integer,\n\t\tTax as integer,\n\t\ttotal_amt as integer,\n\t\tStore_type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tmapColumn(\n\t\tTransaction_key = out_surgatekey,\n\t\tcustomer_id = cust_id,\n\t\ttransaction_id,\n\t\ttran_date,\n\t\tprod_subcat_code,\n\t\tprod_cat_code,\n\t\tQty,\n\t\tRate,\n\t\tTax,\n\t\ttotal_amt,\n\t\tStore_type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1) ~> transactionInsertFlow"
		}
	}
}